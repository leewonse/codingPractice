import java.util.*;
public class ProgrammersPractice {

	public static void main(String args[]) {
		int N=5;
		int[] stages = {2,1,2,6,2,4,3,3};
		int[] answer = {};
		Solution a = new Solution();
		answer = a.solution(N, stages);
		
		for(int i=0; i<answer.length; i++) {
		System.out.print(answer[i]+" ");
		}
	}
}

class Solution{
	
	//N은 전체 스테이지의 개수
	//게임을 이용하는 사용자가 현재 멈춰있는 스테이지의 번호가 담긴 배열 stages
	//실패율이 높은 스테이지부터 내림차순으로 스테이지의 번호가 담겨있는 배열 answer 완성
	//1<=N<=500  500탄까지 있음.
	//1<=stages<=200000		20만명까지 유저수 가능.
	//stages = 1 or N+1
	//실패율이 같다면 작은 번호의 스테이지가 먼저
	//스테이지에 도달한 유저가 없으면 해당 스테이지 실패율은 0
	
	public int[] solution(int N, int[] stages) {
		int answer[]= new int[N];
		
		Arrays.sort(stages);
		boolean[] visit = new boolean[502];
		int left_person = stages.length;
		double[][] fail_rate = new double[N+1][2];
		int fail_rate_counter=0;
		
		for(int i=0; i<stages.length;i++) {
			if(visit[stages[i]]==false) {
				int count=1;
				if(stages[i]==N+1) {continue;}
				
				for(int j=1; j<stages.length; j++) {	
					if(stages[i]==stages[j] && i!=j) {
						count++;
					}
					
				}
				visit[stages[i]]=true;
				fail_rate[stages[i]][1]=(double)count/left_person;
				left_person -= count;
			}
		}
		for(int k=1; k<N+1;k++) {
			fail_rate[k][0]=k;
		}
		
		Arrays.sort(fail_rate, (o1,o2)-> {
			if(o1[1]==o2[1]) {
				return Double.compare(o1[0], o2[0]);
			}
			else if(o1[0]==0) {return 0;}
			else if(o2[0]==0) {return 0;}
			else {
				return Double.compare(o2[1],o1[1]);
			}
		});
		
		for(int k=1; k<N+1;k++) {
			answer[k-1] = (int)fail_rate[k][0];
		}
		
		return answer;
	}
	
}
